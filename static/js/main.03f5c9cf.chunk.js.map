{"version":3,"sources":["item/Item.module.css","item/Item.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","months","Item","this","props","data","name","main","dt","weather","D","Date","Year","getFullYear","Mouth","getMonth","Day","getDate","Hour","getHours","Mintue","getMinutes","picReg","RegExp","className","style","infoCard","importWrapper","map","idx","key","weatherIcon","src","test","alt","weatherDescription","timeIcon","degreeIcon","temp","toFixed","Component","App","WeatherData","text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,SAAW,uBAAuB,SAAW,uBAAuB,cAAgB,4BAA4B,WAAa,yBAAyB,YAAc,0BAA0B,mBAAqB,mC,mqICGjOC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAgD1EC,E,iLA7CH,IAAD,EAMHC,KAAKC,MAAMC,KAJbC,EAFK,EAELA,KACAC,EAHK,EAGLA,KACAC,EAJK,EAILA,GACAC,EALK,EAKLA,QAGIC,EAAI,IAAIC,KAAKH,GACfI,EAAOF,EAAEG,cACbC,EAAQb,EAAOS,EAAEK,YACjBC,EAAMN,EAAEO,UACRC,EAAOR,EAAES,WACTC,EAASV,EAAEW,aAILC,EAAS,IAAIC,OADQ,iCAG3B,OACE,yBAAKC,UAAWC,IAAMC,UAClB,yBAAKF,UAAWC,IAAME,eAElBlB,EAAQmB,KAAI,SAACvB,EAAKwB,GAAN,OACV,yBAAKC,IAAKD,EAAKL,UAAWC,IAAMM,aAC9B,8BAAO1B,EAAI,MACX,yBAAK2B,IAAOV,EAAOW,KAAK5B,EAAI,MAAuEA,EAAI,KAA7F,2CAAmEA,EAAI,KAAvE,WAAuG6B,IAAK7B,EAAI,OAC1H,0BAAMmB,UAAWC,IAAMU,oBAAqB9B,EAAI,iBAItD,yBAAKmB,UAAWC,IAAMW,UAClB,8BAAOpB,EAAP,KAAcF,EAAd,IAAsBF,GACtB,4BAAKN,GACL,8BAAQY,EAAO,GAAR,WAAiBA,GAAOA,EAA/B,MAAyCE,EAAS,GAAV,WAAmBA,GAASA,KAGxE,yBAAKI,UAAWC,IAAMY,YACpB,4BAAK9B,EAAK+B,KAAKC,QAAQ,GAAvB,c,GAvCGC,aCsCJC,E,iLAnBX,OAEE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,kBACf,sDACA,yBAAKA,UAAU,sBAEXkB,EAAYd,KAAI,SAACe,EAAKd,GAAN,OAChB,kBAAC,EAAD,CAAMxB,KAAMsC,EAAMb,IAAKD,c,GA5BjBW,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03f5c9cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoCard\":\"Item_infoCard__3-8ht\",\"timeIcon\":\"Item_timeIcon__1KvAh\",\"importWrapper\":\"Item_importWrapper__15EWa\",\"degreeIcon\":\"Item_degreeIcon__131iJ\",\"weatherIcon\":\"Item_weatherIcon__2v0M-\",\"weatherDescription\":\"Item_weatherDescription__Ui6LL\"};","import React, { Component } from 'react';\r\n// import styled from 'styled-components';\r\nimport style from './Item.module.css';\r\n\r\nlet months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\r\n\r\nclass Item extends Component {\r\n    render() {\r\n      const {\r\n        name,\r\n        main,\r\n        dt,\r\n        weather\r\n      } = this.props.data;\r\n\r\n      const D = new Date(dt);\r\n      let Year = D.getFullYear(),\r\n      Mouth = months[D.getMonth()],  \r\n      Day = D.getDate(),\r\n      Hour = D.getHours(),\r\n      Mintue = D.getMinutes();  \r\n\r\n      //  picture expression\r\n      const PICTURE_EXPRESSION = /\\.(png|jpe?g|gif|svg)(\\?.*)?$/\r\n      const picReg = new RegExp (PICTURE_EXPRESSION)\r\n\r\n      return (\r\n        <div className={style.infoCard}>\r\n            <div className={style.importWrapper}>\r\n              {\r\n                weather.map((data,idx) => (\r\n                  <div key={idx} className={style.weatherIcon}>\r\n                    <span>{data['main']}</span>\r\n                    <img src={(!picReg.test(data['icon'])) ? `http://openweathermap.org/img/wn/${data['icon']}@2x.png`:data['icon']} alt={data['icon']}/> \r\n                    <span className={style.weatherDescription}>{data['description']}</span>\r\n                  </div>\r\n                ))\r\n              }\r\n              <div className={style.timeIcon}>\r\n                  <span>{Day}  {Mouth} {Year}</span>\r\n                  <h2>{name}</h2>\r\n                  <span>{(Hour < 10)? `0${Hour}`:Hour} : {(Mintue < 10)? `0${Mintue}`:Mintue}</span>\r\n              </div>\r\n            </div>\r\n              <div className={style.degreeIcon}>\r\n                <h4>{main.temp.toFixed(0)}Â°</h4>\r\n              </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Item;","import React ,{ Component }from 'react';\nimport './App.css';\nimport WeatherData from './data.json';\nimport Item from './item/Item'\n\nclass App extends Component {\n  // state = {\n  //   repos: []\n  // }\n  // componentDidMount() {\n  //   this.handleSearch()\n  // }\n  // handleSearch = () =>{\n  //   let url = 'http://api.openweathermap.org/data/2.5/weather?q=London';\n  //   fetch(url).then(response => response.json()).then((repos) => {\n  //     console.log(repos);\n  //     console.log(repos.length);\n  //     this.setState({\n  //       repos: this.state.repos\n  //     });\n  //   }).catch(response => {\n  //     console.log(response)\n  //   });\n  // };\n  render() {\n    return (\n      \n      <div className=\"App\">\n        <div className=\"WeatherWrapper\">\n        <h1>Aus City Weather Today</h1>\n        <div className=\"WeatherInfoWrapper\">\n          {\n            WeatherData.map((text,idx) => (\n            <Item data={text} key={idx}/>))\n          }\n        </div>\n\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}